const app = Vue.createApp({
  setup() {
    let overlay = Vue.ref(false);
    let isSuccess = Vue.ref(false);
    let isShow = Vue.reactive({
      select: false,
      contactImg: false,
      region: false,
      regionImg: false,
      topic: false,
      topicImg: false
    });
    let remindList = Vue.reactive({
      NewslettersCheck: false,
      privacyPolicyCheck: false,
      emailReg: false
    });
    let defaultState = Vue.reactive({
      regionList: ["\u5927\u8FDE", "\u6C88\u9633"],
      topicList: ["1213", "234234"]
    });
    let formDataList = Vue.reactive({
      firstNameOne: "",
      firstNameTwo: "",
      lastNameOne: "",
      lastNameTwo: "",
      contactPreferenced: "",
      topiced: "",
      regioned: "",
      phoneNumber: "",
      email: "",
      postalCode: "",
      questionData: "",
      NewslettersCheck: false,
      privacyPolicyCheck: false
    });
    let pageData = Vue.reactive({
      contact: "",
      topic: "",
      region: ""
    });
    const isRemind = Vue.reactive({
      firstNameOne: false,
      lastNameOne: false,
      firstNameTwo: false,
      lastNameTwo: false,
      regioned: false,
      postalCode: false,
      topiced: false,
      questionData: false
    });
    let contactChange = Vue.ref(false);
    let isPass = Vue.ref(true);
    let topic = Vue.ref(null);
    const formAction = Vue.ref(null);
    const getContactPreferenceVal = function(item, data) {
      formDataList.contactPreferenced = data;
      pageData.contact = item;
    };
    const getRegionVal = function(item) {
      formDataList.regioned = item;
      pageData.region = item;
    };
    const getTopicVal = function(item, data) {
      formDataList.topiced = data;
      pageData.topic = item;
    };
    const checkone = function() {
    };
    const checktwo = function() {
      if (formDataList.privacyPolicyCheck === true) {
        remindList.privacyPolicyCheck = false;
      }
    };
    const reg = /^[\w\.]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/;
    const checkRequire = () => {
      remindList.privacyPolicyCheck = !formDataList.privacyPolicyCheck;
      if (remindList.privacyPolicyCheck) {
        isPass.value = false;
      }
      if (formDataList.NewslettersCheck && remindList.email) {
        isPass.value = false;
      }
      for (const i in isRemind) {
        if (isRemind[i] === true) {
          remindList[i] = !formDataList[i];
          if (remindList[i] === true) {
            isPass.value = false;
          }
        }
      }
      if (remindList.emailReg) {
        isPass.value = false;
      }
    };
    const validityData = () => {
      for (const i in remindList) {
        remindList[i] = false;
      }
      isPass.value = true;
      if (formDataList.NewslettersCheck || formDataList.contactPreferenced === "email") {
        remindList.email = !reg.test(formDataList.email) && (formDataList.contactPreferenced === "email" || formDataList.NewslettersCheck);
      } else {
        remindList.email = false;
      }
      if (formDataList.contactPreferenced === "phone") {
        remindList.phoneNumber = !formDataList.phoneNumber;
        if (remindList.phoneNumber) {
          isPass.value = false;
        }
        if (formDataList.email) {
          remindList.email = true;
          remindList.emailReg = !reg.test(formDataList.email);
          if (reg.test(formDataList.email)) {
            remindList.email = false;
          }
        }
      } else if (formDataList.contactPreferenced === "email") {
        remindList.email = !formDataList.email;
        if (remindList.email) {
          isPass.value = false;
        }
      }
    };
    const submitConcatUsForm = function(e) {
      var _a, _b, _c, _d;
      validityData();
      checkRequire();
      if (isPass.value) {
        axios.post((_a = formAction == null ? void 0 : formAction.value) == null ? void 0 : _a.dataset["action"], {
          source: 1,
          firstName: formDataList.firstNameOne,
          lastName: formDataList.lastNameOne,
          contactPreference: formDataList.contactPreferenced,
          phoneNumber: formDataList.phoneNumber.toString(),
          email: formDataList.email,
          country: (_b = window.siteInfo) == null ? void 0 : _b.siteName,
          region: formDataList.regioned,
          newsLetters: formDataList.NewslettersCheck === true ? "Y" : "N",
          topic: formDataList.topiced,
          postalCode: formDataList.postalCode,
          question: formDataList.questionData
        }).then((res) => {
          var _a2, _b2;
          window.dataLayer.push({
            "event": "uaEvent",
            "eventCategory": "Contact Us_Success",
            "eventAction": ((_a2 = window.siteInfo) == null ? void 0 : _a2.pageType) || "other",
            "eventLabel": `Submit`
          });
          window.adobeDataLayer.push({
            "event": "uaEvent",
            "data": {
              "eventCategory": "Contact Us_Success",
              "eventAction": ((_b2 = window.siteInfo) == null ? void 0 : _b2.pageType) || "other",
              "eventLabel": `Submit`
            }
          });
          overlay.value = true;
          if (res.data.code == "000000") {
            isSuccess.value = true;
            setTimeout(() => {
              isPass.value = false;
              for (const i in formDataList) {
                if (i !== "contactPreferenced" && i !== "regioned" && i !== "topiced") {
                  formDataList[i] = "";
                }
              }
            }, 2e3);
            setTimeout(() => {
              for (const i in remindList) {
                remindList[i] = false;
              }
            }, 2e3);
            contactChange.value = false;
            contactDefault();
            regionDefault();
            topicDefault();
          } else {
            isSuccess.value = false;
          }
          setTimeout(() => {
            overlay.value = false;
          }, 2e3);
        }).catch(() => {
          var _a2, _b2;
          overlay.value = true;
          isSuccess.value = false;
          setTimeout(() => {
            overlay.value = false;
          }, 2e3);
          window.dataLayer.push({
            "event": "uaEvent",
            "eventCategory": "Contact Us_Failed",
            "eventAction": ((_a2 = window.siteInfo) == null ? void 0 : _a2.pageType) || "other",
            "eventLabel": `Submit`
          });
          window.adobeDataLayer.push({
            "event": "uaEvent",
            "data": {
              "eventCategory": "Contact Us_Failed",
              "eventAction": ((_b2 = window.siteInfo) == null ? void 0 : _b2.pageType) || "other",
              "eventLabel": `Submit`
            }
          });
        });
      } else {
        window.dataLayer.push({
          "event": "uaEvent",
          "eventCategory": "Contact Us_Failed",
          "eventAction": ((_c = window.siteInfo) == null ? void 0 : _c.pageType) || "other",
          "eventLabel": `Submit`
        });
        window.adobeDataLayer.push({
          "event": "uaEvent",
          "data": {
            "eventCategory": "Contact Us_Failed",
            "eventAction": ((_d = window.siteInfo) == null ? void 0 : _d.pageType) || "other",
            "eventLabel": `Submit`
          }
        });
      }
    };
    Vue.watch(() => formDataList.email, () => {
      remindList.email = !reg.test(formDataList.email);
      remindList.emailReg = !reg.test(formDataList.email);
      if (!formDataList.email)
        remindList.emailReg = false;
      if (!formDataList.NewslettersCheck && formDataList.contactPreferenced !== "email" && !formDataList.email)
        remindList.email = false;
    });
    for (const i in isRemind) {
      Vue.watch(() => formDataList[i], () => {
        remindList[i] = !formDataList[i];
      });
    }
    Vue.watch(() => formDataList.privacyPolicyCheck, () => {
      remindList.privacyPolicyCheck = !formDataList.privacyPolicyCheck;
    });
    Vue.watch(() => formDataList.contactPreferenced, () => {
      if (contactChange.value) {
        remindList.email = !reg.test(formDataList.email);
        if (!formDataList.NewslettersCheck && formDataList.contactPreferenced !== "email" && !formDataList.email)
          remindList.email = false;
        remindList.phoneNumber = !formDataList.phoneNumber && formDataList.contactPreferenced === "phone";
      }
    });
    Vue.watch(() => formDataList.NewslettersCheck, () => {
      remindList.email = !reg.test(formDataList.email);
      if (!formDataList.NewslettersCheck && formDataList.contactPreferenced !== "email")
        remindList.email = false;
    });
    Vue.watch(() => formDataList.phoneNumber, () => {
      if (formDataList.contactPreferenced === "phone" && contactChange.value === true)
        remindList.phoneNumber = !formDataList.phoneNumber;
    });
    Vue.watch(formDataList, () => {
      isPass.value = true;
      if (remindList.privacyPolicyCheck) {
        isPass.value = false;
      }
      if (remindList.email) {
        isPass.value = false;
      }
      if (remindList.phoneNumber) {
        isPass.value = false;
      }
      for (const i in isRemind) {
        if (isRemind[i] === true) {
          if (remindList[i] === true) {
            isPass.value = false;
          }
        }
      }
      if (remindList.emailReg) {
        isPass.value = false;
      }
    });
    const selectOption = function(e) {
      e.stopPropagation();
      for (const i in isShow) {
        if (i !== "select" && i !== "contactImg") {
          isShow[i] = false;
        }
      }
      isShow.select = !isShow.select;
      isShow.contactImg = !isShow.contactImg;
    };
    const selectDisappear = function() {
      window.addEventListener("click", () => {
        for (const i in isShow) {
          isShow[i] = false;
        }
      });
    };
    const selectRegion = function(e) {
      e.stopPropagation();
      for (const i in isShow) {
        if (i !== "region" && i !== "regionImg") {
          isShow[i] = false;
        }
      }
      isShow.region = !isShow.region;
      isShow.regionImg = !isShow.regionImg;
    };
    const regionDisappear = function() {
      window.addEventListener("click", () => {
        for (const i in isShow) {
          isShow[i] = false;
        }
      });
    };
    const selectTopic = function(e) {
      e.stopPropagation();
      for (const i in isShow) {
        if (i !== "topic" && i !== "topicImg") {
          isShow[i] = false;
        }
      }
      isShow.topic = !isShow.topic;
      isShow.topicImg = !isShow.topicImg;
    };
    const topicDisappear = function() {
      window.addEventListener("click", () => {
        for (const i in isShow) {
          isShow[i] = false;
        }
      });
    };
    const elList = Vue.reactive([]);
    const allRef = (el) => {
      elList.push(el);
    };
    const initElList = () => {
      elList.forEach((item) => {
        const key = item == null ? void 0 : item.getAttribute("data-filed");
        const value = item == null ? void 0 : item.getAttribute("data-required");
        isRemind[key] = value === "true" ? true : false;
      });
    };
    const contact = Vue.ref(null);
    const contactDefault = () => {
      var _a, _b;
      pageData.contact = (_a = contact.value) == null ? void 0 : _a.getAttribute("data-contact-text");
      formDataList.contactPreferenced = (_b = contact.value) == null ? void 0 : _b.getAttribute("data-contact-value");
      Vue.nextTick(() => {
        contactChange.value = true;
      });
    };
    const region = Vue.ref(null);
    const regionDefault = () => {
      var _a, _b;
      pageData.region = (_a = region.value) == null ? void 0 : _a.getAttribute("data-region");
      formDataList.regioned = (_b = region.value) == null ? void 0 : _b.getAttribute("data-region");
    };
    const topicDefault = () => {
      var _a, _b;
      const text = (_a = topic.value) == null ? void 0 : _a.getAttribute("data-topic-text");
      const value = (_b = topic.value) == null ? void 0 : _b.getAttribute("data-topic-value");
      pageData.topic = text;
      formDataList.topiced = value;
    };
    Vue.onMounted(() => {
      selectDisappear();
      regionDisappear();
      topicDisappear();
      initElList();
      regionDefault();
      topicDefault();
      contactDefault();
    });
    return {
      isPass,
      overlay,
      isShow,
      remindList,
      formDataList,
      defaultState,
      isRemind,
      isSuccess,
      getContactPreferenceVal,
      getRegionVal,
      getTopicVal,
      checkone,
      checktwo,
      submitConcatUsForm,
      selectOption,
      selectDisappear,
      selectRegion,
      regionDisappear,
      selectTopic,
      topicDisappear,
      allRef,
      formAction,
      pageData,
      region,
      topic,
      contact
    };
  }
});
app.mount(".byd-contact-us-page");
